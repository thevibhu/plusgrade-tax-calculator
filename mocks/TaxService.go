// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/thevibhu/plusgrade-tax-calculator/internal/models"
)

// TaxService is an autogenerated mock type for the TaxService type
type TaxService struct {
	mock.Mock
}

// CalculateTax provides a mock function with given fields: income, year
func (_m *TaxService) CalculateTax(income float64, year string) (*models.TaxCalculationResponse, error) {
	ret := _m.Called(income, year)

	var r0 *models.TaxCalculationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(float64, string) (*models.TaxCalculationResponse, error)); ok {
		return rf(income, year)
	}
	if rf, ok := ret.Get(0).(func(float64, string) *models.TaxCalculationResponse); ok {
		r0 = rf(income, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaxCalculationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(float64, string) error); ok {
		r1 = rf(income, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaxBrackets provides a mock function with given fields: year
func (_m *TaxService) GetTaxBrackets(year string) ([]models.TaxBracket, error) {
	ret := _m.Called(year)

	var r0 []models.TaxBracket
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.TaxBracket, error)); ok {
		return rf(year)
	}
	if rf, ok := ret.Get(0).(func(string) []models.TaxBracket); ok {
		r0 = rf(year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TaxBracket)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaxService creates a new instance of TaxService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaxService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaxService {
	mock := &TaxService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
